name: Build gnd Binaries

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    name: Build gnd for ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            asset_name: gnd-linux-x86_64
            cross_compile: false
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04-arm
            asset_name: gnd-linux-aarch64
            cross_compile: false
          - target: x86_64-apple-darwin
            runner: macos-13
            asset_name: gnd-macos-x86_64
            cross_compile: false
          - target: aarch64-apple-darwin
            runner: macos-14
            asset_name: gnd-macos-aarch64
            cross_compile: false
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            asset_name: gnd-windows-x86_64.exe
            cross_compile: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.runner, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev protobuf-compiler musl-tools libssl-dev

      - name: Install dependencies (macOS)
        if: startsWith(matrix.runner, 'macos')
        run: |
          brew install postgresql protobuf openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: startsWith(matrix.runner, 'windows')
        run: |
          # Install protobuf and PostgreSQL using Chocolatey
          choco install protoc
          choco install postgresql -y
          
          # Set environment variables for PostgreSQL
          echo "POSTGRES_PATH=C:\Program Files\PostgreSQL\15" >> $env:GITHUB_ENV
          echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\15\lib" >> $env:GITHUB_ENV
          echo "LIBPQ_PATH=C:\Program Files\PostgreSQL\15\lib" >> $env:GITHUB_ENV
          
          # Add PostgreSQL bin directory to PATH
          echo "C:\Program Files\PostgreSQL\15\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Build gnd binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin gnd --release --target ${{ matrix.target }}
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          # Windows-specific PostgreSQL configuration
          PQ_LIB_DIR: ${{ env.PQ_LIB_DIR }}
          POSTGRES_PATH: ${{ env.POSTGRES_PATH }}
          LIBPQ_PATH: ${{ env.LIBPQ_PATH }}

      - name: Prepare binary (Unix)
        if: ${{ !startsWith(matrix.runner, 'windows') }}
        run: |
          cp target/${{ matrix.target }}/release/gnd ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}
          gzip ${{ matrix.asset_name }}

      - name: Prepare binary (Windows)
        if: startsWith(matrix.runner, 'windows')
        run: |
          copy target\${{ matrix.target }}\release\gnd.exe ${{ matrix.asset_name }}
          7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded artifacts
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux x86_64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/gnd-linux-x86_64/gnd-linux-x86_64.gz
          asset_name: gnd-linux-x86_64.gz
          asset_content_type: application/gzip

      - name: Upload Linux ARM64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/gnd-linux-aarch64/gnd-linux-aarch64.gz
          asset_name: gnd-linux-aarch64.gz
          asset_content_type: application/gzip

      - name: Upload macOS x86_64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/gnd-macos-x86_64/gnd-macos-x86_64.gz
          asset_name: gnd-macos-x86_64.gz
          asset_content_type: application/gzip

      - name: Upload macOS ARM64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/gnd-macos-aarch64/gnd-macos-aarch64.gz
          asset_name: gnd-macos-aarch64.gz
          asset_content_type: application/gzip

      - name: Upload Windows x86_64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/gnd-windows-x86_64.exe/gnd-windows-x86_64.exe.zip
          asset_name: gnd-windows-x86_64.exe.zip
          asset_content_type: application/zip 